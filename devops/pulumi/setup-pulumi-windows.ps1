# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Pulumi –Ω–∞ Windows 11
# –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

Write-Host "üöÄ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Pulumi –Ω–∞ Windows 11" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ùå –¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    Write-Host "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ PowerShell —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É." -ForegroundColor Yellow
    exit 1
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
function Test-Command($cmdname) {
    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ winget
function Install-WingetPackage($packageName, $displayName) {
    if (Test-Command $packageName) {
        Write-Host "‚úÖ $displayName –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor Green
        return $true
    }
    
    Write-Host "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è $displayName..." -ForegroundColor Yellow
    try {
        winget install $packageName --accept-source-agreements --accept-package-agreements
        if (Test-Command $packageName) {
            Write-Host "‚úÖ $displayName —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è $displayName" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è $displayName: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π winget
if (-not (Test-Command winget)) {
    Write-Host "‚ùå winget –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å App Installer –∑ Microsoft Store." -ForegroundColor Red
    exit 1
}

Write-Host "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤..." -ForegroundColor Blue

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Git
$gitInstalled = Install-WingetPackage "Git.Git" "Git"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js
$nodeInstalled = Install-WingetPackage "OpenJS.NodeJS" "Node.js"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python
$pythonInstalled = Install-WingetPackage "Python.Python.3.11" "Python 3.11"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è AWS CLI
$awsInstalled = Install-WingetPackage "Amazon.AWSCLI" "AWS CLI"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Azure CLI
$azureInstalled = Install-WingetPackage "Microsoft.AzureCLI" "Azure CLI"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Pulumi
$pulumiInstalled = Install-WingetPackage "Pulumi.Pulumi" "Pulumi"

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è PATH
Write-Host "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó PATH..." -ForegroundColor Yellow
$env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π
Write-Host "`nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π:" -ForegroundColor Blue

if ($gitInstalled) {
    $gitVersion = git --version 2>$null
    Write-Host "Git: $gitVersion" -ForegroundColor Green
}

if ($nodeInstalled) {
    $nodeVersion = node --version 2>$null
    $npmVersion = npm --version 2>$null
    Write-Host "Node.js: $nodeVersion" -ForegroundColor Green
    Write-Host "npm: $npmVersion" -ForegroundColor Green
}

if ($pythonInstalled) {
    $pythonVersion = python --version 2>$null
    $pipVersion = pip --version 2>$null
    Write-Host "Python: $pythonVersion" -ForegroundColor Green
    Write-Host "pip: $pipVersion" -ForegroundColor Green
}

if ($awsInstalled) {
    $awsVersion = aws --version 2>$null
    Write-Host "AWS CLI: $awsVersion" -ForegroundColor Green
}

if ($azureInstalled) {
    $azureVersion = az version --output table 2>$null
    Write-Host "Azure CLI: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor Green
}

if ($pulumiInstalled) {
    $pulumiVersion = pulumi version 2>$null
    Write-Host "Pulumi: $pulumiVersion" -ForegroundColor Green
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
$projectsDir = "$env:USERPROFILE\pulumi-projects"
if (-not (Test-Path $projectsDir)) {
    New-Item -ItemType Directory -Path $projectsDir | Out-Null
    Write-Host "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤: $projectsDir" -ForegroundColor Green
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è VS Code
$vscodeSettingsDir = "$env:APPDATA\Code\User"
if (-not (Test-Path $vscodeSettingsDir)) {
    New-Item -ItemType Directory -Path $vscodeSettingsDir -Force | Out-Null
}

$vscodeSettings = @{
    "terminal.integrated.defaultProfile.windows"           = "PowerShell"
    "terminal.integrated.profiles.windows"                 = @{
        "PowerShell" = @{
            "source" = "PowerShell"
            "args"   = @("-NoExit", "-Command", "cd $projectsDir")
        }
    }
    "files.associations"                                   = @{
        "*.ts"   = "typescript"
        "*.yaml" = "yaml"
        "*.yml"  = "yaml"
    }
    "typescript.preferences.includePackageJsonAutoImports" = "on"
}

$vscodeSettingsPath = "$vscodeSettingsDir\settings.json"
$vscodeSettings | ConvertTo-Json -Depth 10 | Set-Content $vscodeSettingsPath
Write-Host "‚öôÔ∏è –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ VS Code –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Pulumi" -ForegroundColor Green

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥
Write-Host "`nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥..." -ForegroundColor Blue

$quickCommands = @"
# –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Pulumi
function New-PulumiProject {
    param([string]`$ProjectName, [string]`$Template = "aws-typescript")
    `$projectPath = "$projectsDir\`$ProjectName"
    if (Test-Path `$projectPath) {
        Write-Host "‚ùå –ü—Ä–æ–µ–∫—Ç `$ProjectName –≤–∂–µ —ñ—Å–Ω—É—î!" -ForegroundColor Red
        return
    }
    mkdir `$projectPath
    cd `$projectPath
    pulumi new `$Template
    Write-Host "‚úÖ –ü—Ä–æ–µ–∫—Ç `$ProjectName —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ `$projectPath" -ForegroundColor Green
}

function Start-PulumiDemo {
    cd "$projectsDir"
    if (Test-Path "pulumi-demo") {
        Write-Host "‚ùå –ü—Ä–æ–µ–∫—Ç pulumi-demo –≤–∂–µ —ñ—Å–Ω—É—î!" -ForegroundColor Red
        return
    }
    mkdir pulumi-demo
    cd pulumi-demo
    pulumi new aws-typescript
    Write-Host "‚úÖ –î–µ–º–æ –ø—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ 'npm install'" -ForegroundColor Green
}

function Show-PulumiStatus {
    Write-Host "=== –°—Ç–∞—Ç—É—Å Pulumi ===" -ForegroundColor Cyan
    Write-Host "Pulumi –≤–µ—Ä—Å—ñ—è: $(pulumi version)" -ForegroundColor Green
    Write-Host "–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–µ–∫: $(pulumi stack --show-name 2>`$null)" -ForegroundColor Green
    Write-Host "–í—Å—ñ —Å—Ç–µ–∫–∏: $(pulumi stack ls 2>`$null)" -ForegroundColor Green
}

# –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
Export-ModuleMember -Function New-PulumiProject, Start-PulumiDemo, Show-PulumiStatus
"@

$profilePath = "$env:USERPROFILE\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1"
$profileDir = Split-Path $profilePath -Parent

if (-not (Test-Path $profileDir)) {
    New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
}

$quickCommands | Out-File -FilePath $profilePath -Append -Encoding UTF8
Write-Host "‚úÖ –î–æ–¥–∞–Ω–æ —à–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–æ PowerShell profile" -ForegroundColor Green

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è README —Ñ–∞–π–ª—É
$readmeContent = @"
# Pulumi –Ω–∞ Windows 11 - –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç

## –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:
- ‚úÖ Git
- ‚úÖ Node.js
- ‚úÖ Python 3.11
- ‚úÖ AWS CLI
- ‚úÖ Azure CLI
- ‚úÖ Pulumi

## –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏:
- `New-PulumiProject "my-project"` - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç
- `Start-PulumiDemo` - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –ø—Ä–æ–µ–∫—Ç
- `Show-PulumiStatus` - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å Pulumi

## –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:

### 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AWS (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ AWS):
```powershell
aws configure
```

### 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É:
```powershell
New-PulumiProject "my-first-project"
cd my-first-project
npm install
pulumi preview
```

### 3. –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:
```powershell
pulumi up
```

## –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:
- [Pulumi Documentation](https://www.pulumi.com/docs/)
- [AWS Provider](https://www.pulumi.com/registry/packages/aws/)
- [Azure Provider](https://www.pulumi.com/registry/packages/azure/)

## –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –ø—Ä–æ–µ–∫—Ç—ñ–≤:
$projectsDir

–°—Ç–≤–æ—Ä–µ–Ω–æ: $(Get-Date)
"@

$readmePath = "$projectsDir\README.md"
$readmeContent | Out-File -FilePath $readmePath -Encoding UTF8

Write-Host "`nüéâ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host "üìÅ –ü—Ä–æ–µ–∫—Ç–∏ –±—É–¥—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –≤: $projectsDir" -ForegroundColor Cyan
Write-Host "üìñ README —Ñ–∞–π–ª: $readmePath" -ForegroundColor Cyan
Write-Host "`nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ Pulumi!" -ForegroundColor Green

Write-Host "`nüí° –ü–æ—Ä–∞–¥–∏:" -ForegroundColor Yellow
Write-Host "- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å PowerShell –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥" -ForegroundColor White
Write-Host "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'New-PulumiProject' –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤" -ForegroundColor White
Write-Host "- –ù–∞–ª–∞—à—Ç—É–π—Ç–µ AWS credentials –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º" -ForegroundColor White

Write-Host "`n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
